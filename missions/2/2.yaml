--------

name: Introduction
description: Before we start with missions, let's get familiar with the interface and basic Python syntax.
author: Vik Paruchuri
file_list: []
mission_number: 2
mode: multiscreen

--------

name: The interface
type: code
left_text: |
  Welcome to DataQuest!
  
  Before we dive into the data, we'll spend a few screens learning about the
  interface.
  
  This box is the instructions area. The box to the right is the code area,
  where you type in code.
  
  The results and variables areas are used to show data about the code being
  run. We'll learn more about these later on.
  
  For now, take a look at the instructions below.
  
  Then look at the code area.
initial_display: |
  # We'll be coding in python.
  # Python is a great general purpose language, and is used in a lot of data science and machine learning applications.
  # If you don't know python, that's okay -- important concepts will be introduced as we go along.
  # In python, any line that starts with a # is called a comment, and is used to put in notes and messages.
  # It isn't part of the code, and isn't executed.
answer: |
  # This is a comment.
hint: |
  Just hit run.
check_val: |
  
instructions: |
  Add in your own comment, and then hit "Run" to execute the code.
  
  You can also use `ctrl+alt+r` to run code. Click on the instructions panel,
  then type `?` to see all the hotkeys.

--------

name: Navigation
type: code
left_text: |
  You can use the dropdown above to move between screens.
  
  You can jump forward to skip material you already know, or go backwards to
  refresh your understanding of a concept.
  
  Your progress and code are always saved.
initial_display: |
  # The results area to the right will show the output of the code that is executed.
  # Output will show when you use the print function.
  # For example, the line below will print out 10.
  print(10)
answer: |
  print(5)
hint: |
  Use the print function, followed by the number 5 to print out 5.
check_val: |
  5
instructions: |
  Use the _print_ function to print out `5`

--------

name: Types of Variables
type: code
check_vars: ['h', 'i', 'j']
left_text: |
  Different variables can have different types. Types are useful when it comes
  time to do computation.
initial_display: |
  # A number without decimals is an integer type.
  # An integer can hold negative and positive values
  # We can do do math with integers.
  a = 5
  b = -1
  print(a * b)
  
  # Anything enclosed in single or double quotes is a string.
  # Strings hold text.
  # We can't do math with strings like we can with integers.
  # But there are some operations we can do (that we will learn later on).
  c = "I am a string.  I do string-like things."
  d = 'Also a string!'
  
  # Floats are numbers with decimal points.
  e = 5.1
  f = 10.2
  g = e * f
  
  # There are other types that we will learn about later on.
answer: |
  h = 1
  i = "Strings are great."
  j = 5.1
hint: |
  Use the equals sign to assign the value on the right to the variable on the
  left.
check_code_run: |
  if h is not None and i is not None and j is not None:
    if isinstance(h, int) and isinstance(i, str) and isinstance(j, float):
        return True, ""
  return False, ""
instructions: |
  Assign an _integer_ to `h`, a _string_ to `i`, and a _float_ to `j`.

--------

name: Finding the type of a variable
type: code
check_vars: ['c', 'd', 'e']
left_text: |
  We can use the type function to display the type of a variable. A function is
  a named chunk of code that takes certain inputs and gives you an output.
  
  You can use functions by typing their name, and passing in the inputs. Some
  functions can have multiple input values.
initial_display: |
  # The type function has only one input value.
  a = type(5)
  
  # The above code invokes the type function on the input 5, and as the output, we get the type of 5.
  # The type is assigned to a.
  
  
  # We can also invoke functions on variables.
  b = "DataQuest is the best thing ever"
  # Note how when the type for b is printed, it is abbreviated to str.
  print(type(b))
answer: |
  c = type(10)
  d = type("racecar")
  e = type(10.6)
hint: |
  Remember that c = type(5) assigns the type of 5 to the variable c. d = type('test') will assign the type of 'test' to d.
instructions: |
  Assign the _type_ of `10` to `c`, the _type_ of `"racecar"` to `d`, and the _type_ of `10.6` to `e`.

--------

name: Overwriting Variables
type: code
check_vars: ['a', 'b']
left_text: |
  We can overwrite variables with new values whenever we want.
  
  The variable will only store the most recent value that has been assigned to
  it.
initial_display: |
  a = 5.1
  b = 5
  print(a)
  print(b)
  
  # We can assign new values to existing variables.
  # It doesn't matter if the new values are different types -- they will still overwrite the variable.
  a = "test"
  b = 5.1
answer: |
  a = 10
  b = "Antarctica is not a country"
hint: |
  Just assign the new values to the existing variables.
instructions: |
  Assign `10` to `a`, and `"Antarctica is not a country"` to `b`.

--------

name: More on printing
type: code
left_text: |
  The print function is used to display values. We can print out variables and
  values.
  
  In DataQuest, the output from print functions will show up in the results box
  to the right.
  
  Each time you print something, it will output on a new line.
  
  Printing complex variables will sometimes take up multiple lines in the
  results box.
  
  Printing is very useful when something isn't working how you expect it to, and
  you want to debug.
initial_display: |
  # We can print out values and variables.
  print(5)
  a = 5
  print(a)
  
  # Notice how two lines appeared in the results area?
  # We can also print some values that will take up multiple lines.
  # The \n character means 'make a new line'
  print("Hello.\nGoodbye.")
answer: |
  print("Good evening")
hint: |
  Just print out the string 'Hello'.
check_val: |
  Good evening
instructions: |
  Use the _print_ function to print out the _string_ `"Good evening"`.

--------

name: Debug mode
type: code
no_answer_needed: True
left_text: |
  You might have seen the _Debug_ button at the bottom.
  
  This button will switch you into _debug mode_, and let you execute the code
  line by line.
  
  You can use the control buttons in debug mode to step forward one line,
  backwards one line, or go all the way to the beginning or end of the code.
  
  This can be really useful when you have complex code with functions and if
  statements (which we'll learn about later) that you need help understanding.
  
  It can also be useful when there is an error in your code and you want to find
  out why it is happening.
  
  The blue marker at the left indicates which line is about to be executed. All
  lines before it have already been run.
  
  The variables and results on the right are shown in order, and update as you
  move through the code.
initial_display: |
  # Comments aren't executed, so debug mode skips them.
  # But other lines can be stepped through.
  print(10)
  a = 10
  print(a)
instructions: |
  Try stepping through the code above.
  
  Feel free to add in new variables or print functions if you want.
  
  Hit "Next" to move to the next screen when you're done.

--------

name: Python 2 vs 3
type: code
no_answer_needed: True
left_text: |
  One last thing before we get started -- in this course, we'll be using Python
  version 3 (or just Python 3).
  
  There are two major versions right now, 2 and 3. 3 is newer, and has some nice
  new features.
  
  For a long time, nobody used Python 3, because most code was only compatible
  with Python 2.
  
  Over the past few years, people have put in a lot of effort to make most
  Python code compatible with Python 3.
initial_display: |
  # The major difference that you will immediately notice between python 2 and 3 is the print function.
  # The function below will work in Python 2 and 3.
  print(10)
  
  # For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences.
instructions: |
  Hit "Next" to move to the next screen.

--------