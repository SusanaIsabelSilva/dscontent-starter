--------

name: New Mission
description: This is a new mission.  Edit these fields to customize the display.
author: Author Name Here
file_list: ['test.txt', 'crime_rates.csv', 'titanic_survival.csv']
mission_number: 1
mode: multiscreen
vars:
  1: |
    
  2: |
    import matplotlib.pyplot as plt
    
    # This is code that will be executed before the rest.  It won't be visible to the student.
    # Initial code is carried between screens, so this code will be run before the display code in subsequent screens.
    import pandas
    f = "titanic_survival.csv"
    data = pandas.read_csv(f)
    titanic_survival = data.dropna(subset=["age", "sex"])
  3: |
    import matplotlib.pyplot as plt
    
    # This is code that will be executed before the rest.  It won't be visible to the student.
    # Initial code is carried between screens, so this code will be run before the display code in subsequent screens.
    import pandas
    f = "titanic_survival.csv"
    data = pandas.read_csv(f)
    titanic_survival = data.dropna(subset=["age", "sex"])
    import matplotlib.pyplot as plt
    import numpy
    
  4: |
    import matplotlib.pyplot as plt
    
    # This is code that will be executed before the rest.  It won't be visible to the student.
    # Initial code is carried between screens, so this code will be run before the display code in subsequent screens.
    import pandas
    f = "titanic_survival.csv"
    data = pandas.read_csv(f)
    titanic_survival = data.dropna(subset=["age", "sex"])
    import matplotlib.pyplot as plt
    import numpy
    
    
    

--------

name: Sample Introduction
type: video
no_answer_needed: True
video: http://youtu.be/kDDiR7TDGw0

--------

name: Intro Code
type: code
check_vars: ['c']
left_text: |
  This text is used to introduce the screen, and describe any background
  information needed.
  
  This block is written in [Markdown](http://daringfireball.net/projects/markdown/syntax).  Here's a [cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet).
  
  Using backticks will let you write inline variable names like this: `b` is a
  variable.
  
  Try to do this for all variables and function names -- it makes it easier for
  the reader.
  
  Backticks with "python" will let you add code blocks. Here's an example:
  
  ```python  
  numpy_array[0,0]
  numpy_array[:,0]
  numpy_array[0,:]
  ```
  You can add inline math with dollar signs, like this: $$y=mx+b$$.
initial_display: |
  # This is the area where code is displayed.
  # This is all python code, and will be executed.
  # This code and its results will be shown to the user when the screen is first loaded.
  # You can add comments in here to clarify code, imports, and any code you want.
  b = 10
  a = b * 20
  
  # Indent 4 spaces when you are making a loop or other indented python block.
  for i in [0, 1, 2]:
      print(i)
      if i == 0:
          print("First item!")
  
  # You can also add in plots.
  import matplotlib.pyplot as plt
  day_numbers = [1,2,3,4,5,6,7]
  cars_in_parking_lot = [5,6,4,2,1,7,8]
  
  # You always have to follow plotting commands with plt.show(), otherwise the plots won't show up.
  plt.plot(day_numbers, cars_in_parking_lot)
  plt.show()
answer: |
  # This space contains the python code to get the screen correct.
  # This code runs after all the code in Display.
  # This code is concatened to the end of Display and run to generate the "right" answers.
  # You'll put all the variables you want to check against the "right" answers in the "Check vars" section below.
  # These are the variables that people doing this screen will need to assign to, or manipulate.
  c = 20
hint: |
  This is where you put a hint to help people who are struggling.  This is written in markdown.
  
  There is a "Hint" button on-screen that people can click to see this.
instructions: |
  In this area, you describe what needs to be done to solve the problem and get
  the right answer.  This is in markdown.
  
  Using action-oriented, direct language is best.
  
  Make sure to put backticks around any variables or values you mention.
  
  Example: Assign `20` to the variable `c`.
initial_vars: 1

--------

name: Example 1
type: code
check_vars: ['dq_plot1']
left_text: |
  We can also make plots using dataquest.
initial_display: |
  # The cleaned up data has been loaded into the titanic_survival variable
  import matplotlib.pyplot as plt
  import numpy
answer: |
  plt.hist(titanic_survival["age"])
  plt.axvline(numpy.median(titanic_survival["age"]), color="b")
  plt.axvline(titanic_survival["age"].mean(), color="r")
  plt.show()
  # Note:  if you want to check if a plot in your answer is correct, you need to add a check_var called dq_plotX, where X is the position (starting with 1) of the plot in the "correct" code (initial display plus answer)
hint: |
  The `plt.hist()` function will make a histogram.
  
  The `plt.axvline()` function will add a line to the plt.`
instructions: |
  Plot a histogram of the `"age"` column in `titanic_survival`.
  
  Add in a blue line for the median.
  
  Add in a red line for the mean.
initial_vars: 2

--------

name: Example 2
type: code
check_vars: ['b']
left_text: |
  We can also open, read, and write to resource files.
initial_display: |
  a = open("test.txt", "r")
  print(type(a))
answer: |
  b = open('crime_rates.csv', 'r')
hint: |
  Use the open function along with 'r' to open a file in reading mode.
check_code_run: |
  """
  Sometimes, for whatever reason, you want to override the default checker behavior.
  This function lets you do it, but it should be used very sparingly -- the defaults cover 95% of cases.
  This should return True and an (empty) hint if the answer is correct, and False and a hint if not.
  Any variable specified in the "Check vars" section is automatically injected into this function.
  """
  if b is not None:
    return True, ""
  return False, ""
instructions: |
  Open the file called `"crime_rates.csv"` and store it in `b`.
initial_vars: 3

--------

name: Example 3
type: code
left_text: |
  In DataQuest, the stdout will be shown to the student.  Anything resulting from `print()` will be displayed.
initial_display: |
  # We can print out values and variables.
  print(5)
  a = 5
  print(a)
  print("Hello.\nGoodbye.")
answer: |
  # We can use "Check val" to ensure that certain strings are present in the output.
  print("Good evening")
hint: |
  Just print out the string 'Good evening'.
check_val: |
  Good evening
instructions: |
  Use the _print_ function to print out the _string_ `"Good evening"`.
initial_vars: 4

--------